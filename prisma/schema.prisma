// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  BLOCKED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  VIRTUAL
  CASH
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum ProductStatus {
  DISPONIBLE
  ESCASO
  AGOTADO
}

model UserType {
  userTypeID String @id @default(cuid())
  role       String

  Users User[]
}

model User {
  id         String   @id @default(uuid())
  userTypeID String
  userType   UserType @relation(fields: [userTypeID], references: [userTypeID])
  name       String
  last_name  String
  birthdate  DateTime 
  email      String   @unique
  password   String
  status     Status   @default(ACTIVE)

  stores Store[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id      String @id @default(uuid())
  name    String
  address String
  tel     String
  status  Status @default(ACTIVE)

  userID String
  user   User   @relation(fields: [userID], references: [id])

  products Product[]
  orders   Order[]
  dailyReport DailyReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String        @id @default(uuid())
  storeId     String
  store       Store         @relation(fields: [storeId], references: [id])
  name        String
  salesPrice  Decimal
  costPrice Decimal
  stock Int
  stock_optimus Int
  stock_min   Int
  image       String?
  description String?
  status      ProductStatus @default(DISPONIBLE)

  orderItems OrderLines[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  totalAmount Decimal
  status      OrderStatus @default(PENDING)

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  orderItems OrderLines[]

  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id     String  @id @default(uuid())
  name   String
  orders Order[]
}

model OrderLines {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model dailyReport {
  id        String @id @default(uuid())
  date      DateTime
  
}